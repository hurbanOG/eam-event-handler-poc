/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.opengov.eam.event.message;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class RecordUpdatedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2385241725028394039L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RecordUpdatedEvent\",\"namespace\":\"com.opengov.eam.event.message\",\"fields\":[{\"name\":\"eventId\",\"type\":\"string\"},{\"name\":\"entityId\",\"type\":\"string\"},{\"name\":\"recordId\",\"type\":\"string\"},{\"name\":\"recordType\",\"type\":\"string\"},{\"name\":\"stepId\",\"type\":\"string\"},{\"name\":\"address1\",\"type\":\"string\"},{\"name\":\"address2\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"state\",\"type\":\"string\"},{\"name\":\"zip\",\"type\":\"string\"},{\"name\":\"latitude\",\"type\":\"string\"},{\"name\":\"longitude\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RecordUpdatedEvent> ENCODER =
      new BinaryMessageEncoder<RecordUpdatedEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RecordUpdatedEvent> DECODER =
      new BinaryMessageDecoder<RecordUpdatedEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RecordUpdatedEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RecordUpdatedEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RecordUpdatedEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RecordUpdatedEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RecordUpdatedEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RecordUpdatedEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RecordUpdatedEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RecordUpdatedEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence eventId;
   private java.lang.CharSequence entityId;
   private java.lang.CharSequence recordId;
   private java.lang.CharSequence recordType;
   private java.lang.CharSequence stepId;
   private java.lang.CharSequence address1;
   private java.lang.CharSequence address2;
   private java.lang.CharSequence city;
   private java.lang.CharSequence state;
   private java.lang.CharSequence zip;
   private java.lang.CharSequence latitude;
   private java.lang.CharSequence longitude;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RecordUpdatedEvent() {}

  /**
   * All-args constructor.
   * @param eventId The new value for eventId
   * @param entityId The new value for entityId
   * @param recordId The new value for recordId
   * @param recordType The new value for recordType
   * @param stepId The new value for stepId
   * @param address1 The new value for address1
   * @param address2 The new value for address2
   * @param city The new value for city
   * @param state The new value for state
   * @param zip The new value for zip
   * @param latitude The new value for latitude
   * @param longitude The new value for longitude
   */
  public RecordUpdatedEvent(java.lang.CharSequence eventId, java.lang.CharSequence entityId, java.lang.CharSequence recordId, java.lang.CharSequence recordType, java.lang.CharSequence stepId, java.lang.CharSequence address1, java.lang.CharSequence address2, java.lang.CharSequence city, java.lang.CharSequence state, java.lang.CharSequence zip, java.lang.CharSequence latitude, java.lang.CharSequence longitude) {
    this.eventId = eventId;
    this.entityId = entityId;
    this.recordId = recordId;
    this.recordType = recordType;
    this.stepId = stepId;
    this.address1 = address1;
    this.address2 = address2;
    this.city = city;
    this.state = state;
    this.zip = zip;
    this.latitude = latitude;
    this.longitude = longitude;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventId;
    case 1: return entityId;
    case 2: return recordId;
    case 3: return recordType;
    case 4: return stepId;
    case 5: return address1;
    case 6: return address2;
    case 7: return city;
    case 8: return state;
    case 9: return zip;
    case 10: return latitude;
    case 11: return longitude;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventId = (java.lang.CharSequence)value$; break;
    case 1: entityId = (java.lang.CharSequence)value$; break;
    case 2: recordId = (java.lang.CharSequence)value$; break;
    case 3: recordType = (java.lang.CharSequence)value$; break;
    case 4: stepId = (java.lang.CharSequence)value$; break;
    case 5: address1 = (java.lang.CharSequence)value$; break;
    case 6: address2 = (java.lang.CharSequence)value$; break;
    case 7: city = (java.lang.CharSequence)value$; break;
    case 8: state = (java.lang.CharSequence)value$; break;
    case 9: zip = (java.lang.CharSequence)value$; break;
    case 10: latitude = (java.lang.CharSequence)value$; break;
    case 11: longitude = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public java.lang.CharSequence getEventId() {
    return eventId;
  }



  /**
   * Gets the value of the 'entityId' field.
   * @return The value of the 'entityId' field.
   */
  public java.lang.CharSequence getEntityId() {
    return entityId;
  }



  /**
   * Gets the value of the 'recordId' field.
   * @return The value of the 'recordId' field.
   */
  public java.lang.CharSequence getRecordId() {
    return recordId;
  }



  /**
   * Gets the value of the 'recordType' field.
   * @return The value of the 'recordType' field.
   */
  public java.lang.CharSequence getRecordType() {
    return recordType;
  }



  /**
   * Gets the value of the 'stepId' field.
   * @return The value of the 'stepId' field.
   */
  public java.lang.CharSequence getStepId() {
    return stepId;
  }



  /**
   * Gets the value of the 'address1' field.
   * @return The value of the 'address1' field.
   */
  public java.lang.CharSequence getAddress1() {
    return address1;
  }



  /**
   * Gets the value of the 'address2' field.
   * @return The value of the 'address2' field.
   */
  public java.lang.CharSequence getAddress2() {
    return address2;
  }



  /**
   * Gets the value of the 'city' field.
   * @return The value of the 'city' field.
   */
  public java.lang.CharSequence getCity() {
    return city;
  }



  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public java.lang.CharSequence getState() {
    return state;
  }



  /**
   * Gets the value of the 'zip' field.
   * @return The value of the 'zip' field.
   */
  public java.lang.CharSequence getZip() {
    return zip;
  }



  /**
   * Gets the value of the 'latitude' field.
   * @return The value of the 'latitude' field.
   */
  public java.lang.CharSequence getLatitude() {
    return latitude;
  }



  /**
   * Gets the value of the 'longitude' field.
   * @return The value of the 'longitude' field.
   */
  public java.lang.CharSequence getLongitude() {
    return longitude;
  }



  /**
   * Creates a new RecordUpdatedEvent RecordBuilder.
   * @return A new RecordUpdatedEvent RecordBuilder
   */
  public static com.opengov.eam.event.message.RecordUpdatedEvent.Builder newBuilder() {
    return new com.opengov.eam.event.message.RecordUpdatedEvent.Builder();
  }

  /**
   * Creates a new RecordUpdatedEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RecordUpdatedEvent RecordBuilder
   */
  public static com.opengov.eam.event.message.RecordUpdatedEvent.Builder newBuilder(com.opengov.eam.event.message.RecordUpdatedEvent.Builder other) {
    if (other == null) {
      return new com.opengov.eam.event.message.RecordUpdatedEvent.Builder();
    } else {
      return new com.opengov.eam.event.message.RecordUpdatedEvent.Builder(other);
    }
  }

  /**
   * Creates a new RecordUpdatedEvent RecordBuilder by copying an existing RecordUpdatedEvent instance.
   * @param other The existing instance to copy.
   * @return A new RecordUpdatedEvent RecordBuilder
   */
  public static com.opengov.eam.event.message.RecordUpdatedEvent.Builder newBuilder(com.opengov.eam.event.message.RecordUpdatedEvent other) {
    if (other == null) {
      return new com.opengov.eam.event.message.RecordUpdatedEvent.Builder();
    } else {
      return new com.opengov.eam.event.message.RecordUpdatedEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for RecordUpdatedEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RecordUpdatedEvent>
    implements org.apache.avro.data.RecordBuilder<RecordUpdatedEvent> {

    private java.lang.CharSequence eventId;
    private java.lang.CharSequence entityId;
    private java.lang.CharSequence recordId;
    private java.lang.CharSequence recordType;
    private java.lang.CharSequence stepId;
    private java.lang.CharSequence address1;
    private java.lang.CharSequence address2;
    private java.lang.CharSequence city;
    private java.lang.CharSequence state;
    private java.lang.CharSequence zip;
    private java.lang.CharSequence latitude;
    private java.lang.CharSequence longitude;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.opengov.eam.event.message.RecordUpdatedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.entityId)) {
        this.entityId = data().deepCopy(fields()[1].schema(), other.entityId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.recordId)) {
        this.recordId = data().deepCopy(fields()[2].schema(), other.recordId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.recordType)) {
        this.recordType = data().deepCopy(fields()[3].schema(), other.recordType);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.stepId)) {
        this.stepId = data().deepCopy(fields()[4].schema(), other.stepId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.address1)) {
        this.address1 = data().deepCopy(fields()[5].schema(), other.address1);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.address2)) {
        this.address2 = data().deepCopy(fields()[6].schema(), other.address2);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.city)) {
        this.city = data().deepCopy(fields()[7].schema(), other.city);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.state)) {
        this.state = data().deepCopy(fields()[8].schema(), other.state);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.zip)) {
        this.zip = data().deepCopy(fields()[9].schema(), other.zip);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.latitude)) {
        this.latitude = data().deepCopy(fields()[10].schema(), other.latitude);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.longitude)) {
        this.longitude = data().deepCopy(fields()[11].schema(), other.longitude);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
    }

    /**
     * Creates a Builder by copying an existing RecordUpdatedEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.opengov.eam.event.message.RecordUpdatedEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.entityId)) {
        this.entityId = data().deepCopy(fields()[1].schema(), other.entityId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.recordId)) {
        this.recordId = data().deepCopy(fields()[2].schema(), other.recordId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.recordType)) {
        this.recordType = data().deepCopy(fields()[3].schema(), other.recordType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.stepId)) {
        this.stepId = data().deepCopy(fields()[4].schema(), other.stepId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.address1)) {
        this.address1 = data().deepCopy(fields()[5].schema(), other.address1);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.address2)) {
        this.address2 = data().deepCopy(fields()[6].schema(), other.address2);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.city)) {
        this.city = data().deepCopy(fields()[7].schema(), other.city);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.state)) {
        this.state = data().deepCopy(fields()[8].schema(), other.state);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.zip)) {
        this.zip = data().deepCopy(fields()[9].schema(), other.zip);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.latitude)) {
        this.latitude = data().deepCopy(fields()[10].schema(), other.latitude);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.longitude)) {
        this.longitude = data().deepCopy(fields()[11].schema(), other.longitude);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'eventId' field.
      * @return The value.
      */
    public java.lang.CharSequence getEventId() {
      return eventId;
    }


    /**
      * Sets the value of the 'eventId' field.
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public com.opengov.eam.event.message.RecordUpdatedEvent.Builder setEventId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.eventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventId' field.
      * @return This builder.
      */
    public com.opengov.eam.event.message.RecordUpdatedEvent.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'entityId' field.
      * @return The value.
      */
    public java.lang.CharSequence getEntityId() {
      return entityId;
    }


    /**
      * Sets the value of the 'entityId' field.
      * @param value The value of 'entityId'.
      * @return This builder.
      */
    public com.opengov.eam.event.message.RecordUpdatedEvent.Builder setEntityId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.entityId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'entityId' field has been set.
      * @return True if the 'entityId' field has been set, false otherwise.
      */
    public boolean hasEntityId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'entityId' field.
      * @return This builder.
      */
    public com.opengov.eam.event.message.RecordUpdatedEvent.Builder clearEntityId() {
      entityId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'recordId' field.
      * @return The value.
      */
    public java.lang.CharSequence getRecordId() {
      return recordId;
    }


    /**
      * Sets the value of the 'recordId' field.
      * @param value The value of 'recordId'.
      * @return This builder.
      */
    public com.opengov.eam.event.message.RecordUpdatedEvent.Builder setRecordId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.recordId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'recordId' field has been set.
      * @return True if the 'recordId' field has been set, false otherwise.
      */
    public boolean hasRecordId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'recordId' field.
      * @return This builder.
      */
    public com.opengov.eam.event.message.RecordUpdatedEvent.Builder clearRecordId() {
      recordId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'recordType' field.
      * @return The value.
      */
    public java.lang.CharSequence getRecordType() {
      return recordType;
    }


    /**
      * Sets the value of the 'recordType' field.
      * @param value The value of 'recordType'.
      * @return This builder.
      */
    public com.opengov.eam.event.message.RecordUpdatedEvent.Builder setRecordType(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.recordType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'recordType' field has been set.
      * @return True if the 'recordType' field has been set, false otherwise.
      */
    public boolean hasRecordType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'recordType' field.
      * @return This builder.
      */
    public com.opengov.eam.event.message.RecordUpdatedEvent.Builder clearRecordType() {
      recordType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'stepId' field.
      * @return The value.
      */
    public java.lang.CharSequence getStepId() {
      return stepId;
    }


    /**
      * Sets the value of the 'stepId' field.
      * @param value The value of 'stepId'.
      * @return This builder.
      */
    public com.opengov.eam.event.message.RecordUpdatedEvent.Builder setStepId(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.stepId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'stepId' field has been set.
      * @return True if the 'stepId' field has been set, false otherwise.
      */
    public boolean hasStepId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'stepId' field.
      * @return This builder.
      */
    public com.opengov.eam.event.message.RecordUpdatedEvent.Builder clearStepId() {
      stepId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'address1' field.
      * @return The value.
      */
    public java.lang.CharSequence getAddress1() {
      return address1;
    }


    /**
      * Sets the value of the 'address1' field.
      * @param value The value of 'address1'.
      * @return This builder.
      */
    public com.opengov.eam.event.message.RecordUpdatedEvent.Builder setAddress1(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.address1 = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'address1' field has been set.
      * @return True if the 'address1' field has been set, false otherwise.
      */
    public boolean hasAddress1() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'address1' field.
      * @return This builder.
      */
    public com.opengov.eam.event.message.RecordUpdatedEvent.Builder clearAddress1() {
      address1 = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'address2' field.
      * @return The value.
      */
    public java.lang.CharSequence getAddress2() {
      return address2;
    }


    /**
      * Sets the value of the 'address2' field.
      * @param value The value of 'address2'.
      * @return This builder.
      */
    public com.opengov.eam.event.message.RecordUpdatedEvent.Builder setAddress2(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.address2 = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'address2' field has been set.
      * @return True if the 'address2' field has been set, false otherwise.
      */
    public boolean hasAddress2() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'address2' field.
      * @return This builder.
      */
    public com.opengov.eam.event.message.RecordUpdatedEvent.Builder clearAddress2() {
      address2 = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * @return The value.
      */
    public java.lang.CharSequence getCity() {
      return city;
    }


    /**
      * Sets the value of the 'city' field.
      * @param value The value of 'city'.
      * @return This builder.
      */
    public com.opengov.eam.event.message.RecordUpdatedEvent.Builder setCity(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.city = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'city' field.
      * @return This builder.
      */
    public com.opengov.eam.event.message.RecordUpdatedEvent.Builder clearCity() {
      city = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public java.lang.CharSequence getState() {
      return state;
    }


    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public com.opengov.eam.event.message.RecordUpdatedEvent.Builder setState(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.state = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public com.opengov.eam.event.message.RecordUpdatedEvent.Builder clearState() {
      state = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'zip' field.
      * @return The value.
      */
    public java.lang.CharSequence getZip() {
      return zip;
    }


    /**
      * Sets the value of the 'zip' field.
      * @param value The value of 'zip'.
      * @return This builder.
      */
    public com.opengov.eam.event.message.RecordUpdatedEvent.Builder setZip(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.zip = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'zip' field has been set.
      * @return True if the 'zip' field has been set, false otherwise.
      */
    public boolean hasZip() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'zip' field.
      * @return This builder.
      */
    public com.opengov.eam.event.message.RecordUpdatedEvent.Builder clearZip() {
      zip = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * @return The value.
      */
    public java.lang.CharSequence getLatitude() {
      return latitude;
    }


    /**
      * Sets the value of the 'latitude' field.
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public com.opengov.eam.event.message.RecordUpdatedEvent.Builder setLatitude(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.latitude = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'latitude' field.
      * @return This builder.
      */
    public com.opengov.eam.event.message.RecordUpdatedEvent.Builder clearLatitude() {
      latitude = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * @return The value.
      */
    public java.lang.CharSequence getLongitude() {
      return longitude;
    }


    /**
      * Sets the value of the 'longitude' field.
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public com.opengov.eam.event.message.RecordUpdatedEvent.Builder setLongitude(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.longitude = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'longitude' field.
      * @return This builder.
      */
    public com.opengov.eam.event.message.RecordUpdatedEvent.Builder clearLongitude() {
      longitude = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RecordUpdatedEvent build() {
      try {
        RecordUpdatedEvent record = new RecordUpdatedEvent();
        record.eventId = fieldSetFlags()[0] ? this.eventId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.entityId = fieldSetFlags()[1] ? this.entityId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.recordId = fieldSetFlags()[2] ? this.recordId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.recordType = fieldSetFlags()[3] ? this.recordType : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.stepId = fieldSetFlags()[4] ? this.stepId : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.address1 = fieldSetFlags()[5] ? this.address1 : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.address2 = fieldSetFlags()[6] ? this.address2 : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.city = fieldSetFlags()[7] ? this.city : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.state = fieldSetFlags()[8] ? this.state : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.zip = fieldSetFlags()[9] ? this.zip : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.latitude = fieldSetFlags()[10] ? this.latitude : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.longitude = fieldSetFlags()[11] ? this.longitude : (java.lang.CharSequence) defaultValue(fields()[11]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RecordUpdatedEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<RecordUpdatedEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RecordUpdatedEvent>
    READER$ = (org.apache.avro.io.DatumReader<RecordUpdatedEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.eventId);

    out.writeString(this.entityId);

    out.writeString(this.recordId);

    out.writeString(this.recordType);

    out.writeString(this.stepId);

    out.writeString(this.address1);

    if (this.address2 == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.address2);
    }

    out.writeString(this.city);

    out.writeString(this.state);

    out.writeString(this.zip);

    out.writeString(this.latitude);

    out.writeString(this.longitude);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.eventId = in.readString(this.eventId instanceof Utf8 ? (Utf8)this.eventId : null);

      this.entityId = in.readString(this.entityId instanceof Utf8 ? (Utf8)this.entityId : null);

      this.recordId = in.readString(this.recordId instanceof Utf8 ? (Utf8)this.recordId : null);

      this.recordType = in.readString(this.recordType instanceof Utf8 ? (Utf8)this.recordType : null);

      this.stepId = in.readString(this.stepId instanceof Utf8 ? (Utf8)this.stepId : null);

      this.address1 = in.readString(this.address1 instanceof Utf8 ? (Utf8)this.address1 : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.address2 = null;
      } else {
        this.address2 = in.readString(this.address2 instanceof Utf8 ? (Utf8)this.address2 : null);
      }

      this.city = in.readString(this.city instanceof Utf8 ? (Utf8)this.city : null);

      this.state = in.readString(this.state instanceof Utf8 ? (Utf8)this.state : null);

      this.zip = in.readString(this.zip instanceof Utf8 ? (Utf8)this.zip : null);

      this.latitude = in.readString(this.latitude instanceof Utf8 ? (Utf8)this.latitude : null);

      this.longitude = in.readString(this.longitude instanceof Utf8 ? (Utf8)this.longitude : null);

    } else {
      for (int i = 0; i < 12; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.eventId = in.readString(this.eventId instanceof Utf8 ? (Utf8)this.eventId : null);
          break;

        case 1:
          this.entityId = in.readString(this.entityId instanceof Utf8 ? (Utf8)this.entityId : null);
          break;

        case 2:
          this.recordId = in.readString(this.recordId instanceof Utf8 ? (Utf8)this.recordId : null);
          break;

        case 3:
          this.recordType = in.readString(this.recordType instanceof Utf8 ? (Utf8)this.recordType : null);
          break;

        case 4:
          this.stepId = in.readString(this.stepId instanceof Utf8 ? (Utf8)this.stepId : null);
          break;

        case 5:
          this.address1 = in.readString(this.address1 instanceof Utf8 ? (Utf8)this.address1 : null);
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.address2 = null;
          } else {
            this.address2 = in.readString(this.address2 instanceof Utf8 ? (Utf8)this.address2 : null);
          }
          break;

        case 7:
          this.city = in.readString(this.city instanceof Utf8 ? (Utf8)this.city : null);
          break;

        case 8:
          this.state = in.readString(this.state instanceof Utf8 ? (Utf8)this.state : null);
          break;

        case 9:
          this.zip = in.readString(this.zip instanceof Utf8 ? (Utf8)this.zip : null);
          break;

        case 10:
          this.latitude = in.readString(this.latitude instanceof Utf8 ? (Utf8)this.latitude : null);
          break;

        case 11:
          this.longitude = in.readString(this.longitude instanceof Utf8 ? (Utf8)this.longitude : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










